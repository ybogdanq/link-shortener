org: ybogdanq
app: serverless-team-task
service: serverless
frameworkVersion: "3"

useDotenv: true

provider:
  name: aws
  runtime: nodejs18.x
  region: eu-west-1
  environment:
  iamRoleStatements:
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - ses:SendEmail
        - ses:SendRawEmail
        - dynamodb:*
      Resource: "*"

plugins:
  - serverless-dotenv-plugin
  - serverless-offline
  - serverless-plugin-typescript

custom:
  serverless-offline:
    httpPort: 4000
    ignoreJWTSignature: true
  serverlessPluginTypescript:
    tsConfigFileLocation: "./tsconfig.build.json"

package:
  individually: true # an optimized package per function

functions:
  # USER
  getUser:
    handler: src/functions/user/getUser.handler
    events:
      - http:
          path: /user/get-user
          method: get
          cors: true
  # AUTH
  register:
    handler: src/functions/auth/register.handler
    events:
      - http:
          path: /auth/register
          method: post
          cors: true
  login:
    handler: src/functions/auth/login.handler
    events:
      - http:
          path: /auth/login
          method: post
          cors: true
  logout:
    handler: src/functions/auth/logout.handler
    events:
      - http:
          path: /auth/logout
          method: post
          cors: true
  refreshToken:
    handler: src/functions/auth/refreshToken.handler
    events:
      - http:
          path: /auth/refresh-token
          method: get
          cors: true
  # LINKS
  getLink:
    handler: src/functions/link/getLink.handler
    events:
      - http:
          path: /links/get-link/{id}
          method: get
          cors: true
  getLinksList:
    handler: src/functions/link/getList.handler
    events:
      - http:
          path: /links/all
          method: get
          cors: true
  createLink:
    handler: src/functions/link/create.handler
    events:
      - http:
          path: /links/create-link
          method: post
          cors: true
  deactivateLink:
    handler: src/functions/link/deactivate.handler
    events:
      - http:
          path: /links/deactivate-link/{id}
          method: patch
          cors: true
  visitLink:
    handler: src/functions/link/visitLink.handler
    events:
      - http:
          path: /links/visit-link/{id}
          method: get
          cors: true
  deleteLink:
    handler: src/functions/link/delete.handler
    events:
      - http:
          path: /links/delete-link/{id}
          method: delete
          cors: true
  # CRON JOB
  checkExpiredLinks:
    handler: src/functions/link/checkExpired.handler
    events:
      - schedule: rate(1 hour)
  # EMAIL
  expiredLinkNotification:
    handler: src/functions/link/expiredLinkNotification.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - LinkShortnerNotificationQueue
              - Arn
          batchSize: 1

resources:
  Resources:
    LinkShortnerNotificationQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: LinkShortnerNotificationQueue
    CustomerTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: CustomerTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex # Name of the secondary index
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL # You can customize this based on your needs
    TokenTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: TokenTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: refreshToken
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: RefreshTokenIndex
            KeySchema:
              - AttributeName: refreshToken
                KeyType: HASH
            Projection:
              ProjectionType: ALL
    LinkTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: LinkTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: expiredAt
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        GlobalSecondaryIndexes:
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
          - IndexName: ExpiredAtIndex
            KeySchema:
              - AttributeName: expiredAt
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
    # GatewayResponse:
    #   Type: "AWS::ApiGateway::GatewayResponse"
    #   Properties:
    #     ResponseParameters:
    #       gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
    #       gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
    #     ResponseType: EXPIRED_TOKEN
    #     RestApiId:
    #       Ref: "ApiGatewayRestApi"
    #     StatusCode: "401"
    # AuthFailureGatewayResponse:
    #   Type: "AWS::ApiGateway::GatewayResponse"
    #   Properties:
    #     ResponseParameters:
    #       gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
    #       gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
    #     ResponseType: UNAUTHORIZED
    #     RestApiId:
    #       Ref: "ApiGatewayRestApi"
    #     StatusCode: "401"
