org: ybogdanq
app: serverless-team-task
service: serverless
frameworkVersion: "3"

useDotenv: true

provider:
  name: aws
  runtime: nodejs18.x
  region: eu-west-1
  environment:
  httpApi:
    cors:
      allowCredentials: true
      allowedOrigins:
        - "*"
      allowedMethods:
        - GET
        - OPTIONS
        - POST
        - PUT
        - DELETE
        - PATCH
      allowedHeaders:
        - Content-Type
        - X-Amz-Date
        - Authorization
        - X-Api-Key
        - X-Amz-Security-Token
        - X-Amz-User-Agent
        - X-Transaction-Key
        - Access-Control-Allow-Origin
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - ses:SendEmail
            - ses:SendRawEmail
            - dynamodb:*
          Resource: "*"

plugins:
  - serverless-auto-swagger
  - serverless-dotenv-plugin
  - serverless-offline
  - serverless-esbuild

custom:
  autoswagger:
    apiType: "http"
    typefiles:
      [
        "./src/types/AuthorizationRes.ts",
        "./src/types/Link.ts",
        "./src/types/Token.ts",
        "./src/types/User.ts",
        "./src/types/Arguments/Auth.ts",
        "./src/types/Arguments/Link.ts",
      ]
    apiKeyHeaders: ["Authorization"]
    excludeStages: ["production"]
    basePath: "/dev"
  serverless-offline:
    httpPort: 4000
    ignoreJWTSignature: true
  authorizer:
    name: auth
    resultTtlInSeconds: 0
  esbuild:
    bundle: true
    minify: false

package:
  individually: true # an optimized package per function

functions:
  # USER
  getUser:
    handler: src/functions/user/getUser.handler
    events:
      - http:
          path: /user/get-user
          method: get
          authorizer: ${self:custom.authorizer}
          headerParameters:
            Authorization:
              type: string
              description: "Bearer token; acceessToken"
          responseData:
            200:
              description: "Will get user's actual data (user can get only it's data)"
              bodyType: UserRes
            400:
              description: "User data not found; Token is not valid"
  # AUTH
  auth:
    handler: src/functions/auth/authorizer.handler
  register:
    handler: src/functions/auth/register.handler
    events:
      - http:
          path: /auth/register
          method: post
          bodyType: RegisterUserArguments
          responseData:
            201:
              description: "After registration user will receive it's data and both tokens (refresh, access)"
              bodyType: AuthResponse
            409:
              description: "User already exists"
  login:
    handler: src/functions/auth/login.handler
    events:
      - http:
          path: /auth/login
          method: post
          bodyType: LoginArguments
          responseData:
            200:
              description: "After login user will receive it's data and both tokens (refresh, access)"
              bodyType: AuthResponse
            400:
              description: "User not found; Email or password is not correct"
  logout:
    handler: src/functions/auth/logout.handler
    events:
      - http:
          path: /auth/logout
          method: post
          authorizer: ${self:custom.authorizer}
          headerParameters:
            Cookie:
              type: string
              description: "Http only; Bearer token; Refresh token"
  refreshToken:
    handler: src/functions/auth/refreshToken.handler
    events:
      - http:
          path: /auth/refresh-token
          method: get
          headerParameters:
            Authorization:
              type: string
              description: "Bearer token; acceessToken"
          responseData:
            200:
              description: "After refreshing token user will receive it's data and both tokens (refresh, access)"
              bodyType: AuthResponse
            400:
              description: "User data not found; Token is not valid"
  # LINKS
  getLink:
    handler: src/functions/link/getLink.handler
    events:
      - http:
          path: /links/get-link/{id}
          method: get
          authorizer: ${self:custom.authorizer}
          headerParameters:
            Authorization:
              type: string
              description: "Bearer token; acceessToken"
          responseData:
            200:
              description: "Will get link data"
              bodyType: Link
            400:
              description: "Link not found"
  getLinksList:
    handler: src/functions/link/getList.handler
    events:
      - http:
          path: /links/all
          method: get
          authorizer: ${self:custom.authorizer}
          headerParameters:
            Authorization:
              type: string
              description: "Bearer token; acceessToken"
          responseData:
            200:
              description: "Will get all user's links data"
              bodyType: Link
  createLink:
    handler: src/functions/link/create.handler
    events:
      - http:
          path: /links/create-link
          method: post
          authorizer: ${self:custom.authorizer}
          bodyType: CreateLinkArguments
          headerParameters:
            Authorization:
              type: string
              description: "Bearer token; acceessToken"
          responseData:
            200:
              description: "Will get newly created link"
              bodyType: Link
            400:
              description: "Will get an error if data passed to this lambda will not be valid"
  deactivateLink:
    handler: src/functions/link/deactivate.handler
    events:
      - http:
          path: /links/deactivate-link/{id}
          method: patch
          authorizer: ${self:custom.authorizer}
          headerParameters:
            Authorization:
              type: string
              description: "Bearer token; acceessToken"
          responseData:
            200:
              description: "Will get deactivated link"
              bodyType: Link
            400:
              description: "Link that might be deactivated not found"
  visitLink:
    handler: src/functions/link/visitLink.handler
    events:
      - http:
          path: /links/visit-link/{id}
          method: get
          responseData:
            200:
              description: "Will be redirected to link that was passed as redirection link"
  deleteLink:
    handler: src/functions/link/delete.handler
    events:
      - http:
          path: /links/delete-link/{id}
          method: delete
          authorizer: ${self:custom.authorizer}
          headerParameters:
            Authorization:
              type: string
              description: "Bearer token; acceessToken"
          responseData:
            200:
              description: "Will get deleted link"
              bodyType: Link
            400:
              description: "Link that might be deleted not found"
  # CRON JOB
  expireLinks:
    handler: src/functions/link/expireLinks.handler
    events:
      - schedule: rate(2 hours)
  # EMAIL
  expiredLinkNotification:
    handler: src/functions/link/expiredLinkNotification.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - LinkShortnerNotificationQueue
              - Arn
          batchSize: 10

resources:
  Resources:
    LinkShortnerNotificationQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: LinkShortnerNotificationQueue
    CustomerTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: CustomerTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex # Name of the secondary index
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL # You can customize this based on your needs
    TokenTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: TokenTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: refreshToken
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: RefreshTokenIndex
            KeySchema:
              - AttributeName: refreshToken
                KeyType: HASH
            Projection:
              ProjectionType: ALL
    LinkTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: LinkTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: expiredAt
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: ExpiredAtIndex
            KeySchema:
              - AttributeName: expiredAt
                KeyType: HASH
            Projection:
              ProjectionType: ALL
