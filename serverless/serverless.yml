org: ybogdanq
app: serverless-team-task
service: serverless
frameworkVersion: "3"

useDotenv: true

provider:
  name: aws
  runtime: nodejs18.x
  environment:
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        - arn:aws:dynamodb:us-east-1:726141157734:table/CustomerTable
        - arn:aws:dynamodb:us-east-1:726141157734:table/TokenTable
        - arn:aws:dynamodb:us-east-1:726141157734:table/CustomerTable/index/EmailIndex
        - arn:aws:dynamodb:us-east-1:726141157734:table/TokenTable/index/RefreshTokenIndex

plugins:
  - serverless-dotenv-plugin
  - serverless-offline
  - serverless-plugin-typescript

custom:
  serverless-offline:
    httpPort: 4000
    ignoreJWTSignature: true
  serverlessPluginTypescript:
    tsConfigFileLocation: "./tsconfig.build.json"

package:
  individually: true # an optimized package per function

functions:
  register:
    handler: src/functions/auth/register.handler
    events:
      - http:
          path: /auth/register
          method: post
          cors: true
  login:
    handler: src/functions/auth/login.handler
    events:
      - http:
          path: /auth/login
          method: post
          cors: true
  refreshToken:
    handler: src/functions/auth/refreshToken.handler
    events:
      - http:
          path: /auth/refreshToken
          method: post
          cors: true

resources:
  Resources:
    CustomerTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: CustomerTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex # Name of the secondary index
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL # You can customize this based on your needs
    TokenTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: TokenTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: refreshToken
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: RefreshTokenIndex
            KeySchema:
              - AttributeName: refreshToken
                KeyType: HASH
            Projection:
              ProjectionType: ALL # You can customize this based on your needs
    GatewayResponse:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: "ApiGatewayRestApi"
        StatusCode: "401"
    AuthFailureGatewayResponse:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: "ApiGatewayRestApi"
        StatusCode: "401"
