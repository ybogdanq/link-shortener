org: ybogdanq
app: serverless-team-task
service: serverless
frameworkVersion: "3"

useDotenv: true

provider:
  name: aws
  runtime: nodejs18.x
  region: eu-west-1
  environment:
  iamRoleStatements:
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - ses:SendEmail
        - ses:SendRawEmail
        - dynamodb:*
      Resource: "*"

plugins:
  - serverless-auto-swagger
  - serverless-dotenv-plugin
  - serverless-offline
  - serverless-plugin-typescript

custom:
  autoswagger:
    apiType: "http"
    generateSwaggerOnDeploy: true
    typefiles:
      [
        "./src/types/AuthorizationRes.ts",
        "./src/types/Link.ts",
        "./src/types/Token.ts",
        "./src/types/User.ts",
      ]
    apiKeyHeaders: []
    useStage: true
    schemes: ["http", "https"]
    excludeStages: ["production"]
    useRedirectUI: true
  serverless-offline:
    httpPort: 4000
    ignoreJWTSignature: true
  serverlessPluginTypescript:
    tsConfigFileLocation: "./tsconfig.build.json"
  commonCorsSettings:
    origin: "https://link-shortener-8qb2.vercel.app"
    headers:
      - Content-Type
      - X-Amz-Date
      - Authorization
      - X-Api-Key
      - X-Amz-Security-Token
      - X-Amz-User-Agent
    allowCredentials: true
  authorizer:
    name: auth
    resultTtlInSeconds: 0

package:
  individually: true # an optimized package per function

functions:
  # USER
  getUser:
    handler: src/functions/user/getUser.handler
    events:
      - http:
          path: /user/get-user
          method: get
          authorizer: ${self:custom.authorizer}
          cors: ${self:custom.commonCorsSettings}
  # AUTH
  auth:
    handler: src/functions/auth/authorizer.handler
  register:
    handler: src/functions/auth/register.handler
    events:
      - http:
          path: /auth/register
          method: post
          cors: ${self:custom.commonCorsSettings}
  login:
    handler: src/functions/auth/login.handler
    events:
      - http:
          path: /auth/login
          method: post
          cors: ${self:custom.commonCorsSettings}
  logout:
    handler: src/functions/auth/logout.handler
    events:
      - http:
          path: /auth/logout
          method: post
          authorizer: ${self:custom.authorizer}
          cors: ${self:custom.commonCorsSettings}
  refreshToken:
    handler: src/functions/auth/refreshToken.handler
    events:
      - http:
          path: /auth/refresh-token
          method: get
          cors: ${self:custom.commonCorsSettings}
  # LINKS
  getLink:
    handler: src/functions/link/getLink.handler
    events:
      - http:
          path: /links/get-link/{id}
          method: get
          authorizer: ${self:custom.authorizer}
          cors: ${self:custom.commonCorsSettings}
  getLinksList:
    handler: src/functions/link/getList.handler
    events:
      - http:
          path: /links/all
          method: get
          authorizer: ${self:custom.authorizer}
          cors: ${self:custom.commonCorsSettings}
  createLink:
    handler: src/functions/link/create.handler
    events:
      - http:
          path: /links/create-link
          method: post
          authorizer: ${self:custom.authorizer}
          cors: ${self:custom.commonCorsSettings}
  deactivateLink:
    handler: src/functions/link/deactivate.handler
    events:
      - http:
          path: /links/deactivate-link/{id}
          method: patch
          authorizer: ${self:custom.authorizer}
          cors: ${self:custom.commonCorsSettings}
  visitLink:
    handler: src/functions/link/visitLink.handler
    events:
      - http:
          path: /links/visit-link/{id}
          method: get
          cors: ${self:custom.commonCorsSettings}
  deleteLink:
    handler: src/functions/link/delete.handler
    events:
      - http:
          path: /links/delete-link/{id}
          method: delete
          authorizer: ${self:custom.authorizer}
          cors: ${self:custom.commonCorsSettings}
  # CRON JOB
  checkExpiredLinks:
    handler: src/functions/link/checkExpired.handler
    events:
      - schedule: rate(1 hour)
  # EMAIL
  expiredLinkNotification:
    handler: src/functions/link/expiredLinkNotification.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - LinkShortnerNotificationQueue
              - Arn
          batchSize: 1

resources:
  Resources:
    LinkShortnerNotificationQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: LinkShortnerNotificationQueue
    CustomerTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: CustomerTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex # Name of the secondary index
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL # You can customize this based on your needs
    TokenTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: TokenTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: refreshToken
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: RefreshTokenIndex
            KeySchema:
              - AttributeName: refreshToken
                KeyType: HASH
            Projection:
              ProjectionType: ALL
    LinkTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: LinkTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: expiredAt
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        GlobalSecondaryIndexes:
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
          - IndexName: ExpiredAtIndex
            KeySchema:
              - AttributeName: expiredAt
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
    unauthorized:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'https://link-shortener-8qb2.vercel.app'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,DELETE,OPTIONS'"
          gatewayresponse.header.Access-Control-Allow-Credentials: "'true'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: "ApiGatewayRestApi"
